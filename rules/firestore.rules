rules_version = '2';


/// helper functions ///
function isSignedIn() {
	return request.auth != null;
}
function emailVerified() {
	return request.auth.token.email_verified;
}
function userExists() {
	return exists(/databases/$(database)/documents/users/$(request.auth.uid));
}

// [READ] Data that exists on the Firestore document
function existingData() {
	return resource.data;
}
// [WRITE] Data that is sent to a Firestore document
function incomingData() {
	return request.resource.data;
}

function isOwner(userId) {
	return request.auth.uid == userId;
}

function isAssetOwner() {
	return request.auth.uid == existingData().userId 
}

function isSuperUser(){
	return request.auth.token.superUser == true;
}

function isProducerRep() {
	return [request.auth.uid].hasAny(existingData().repIds)
}

function userEmail(userId) {
	return get(/databases/$(database)/documents/users/$(userId)).data.email;
}


service cloud.firestore {
  match /databases/{database}/documents {

		function isMillAdmin(millsId){
			return exists(/databases/$(database)/documents/mills/$(millsId)/millAdmins/$(request.auth.uid));
		}		

    match /{document=**} {
      allow read: if false;
			allow write: if false;
    }

		match /users/{userId} {
			allow create: if false;
			allow delete: if false;
			allow read:	if isSignedIn(); 
			allow update:	if isSignedIn() && isOwner(userId)
											// //TODO: isAdmin(userId) && isAuditor(userId)
											// && (existingData().plantations == incomingData().plantations
											// || existingData().profile == incomingData().profile)
											// // edit of the the vehicles field values will be overwritten
											// // back to previous values by the userOnUpdate cloud function,
											// // only delete of a vehicle map entry is allowed 

		}

		match /profiles/{userId} {
						// allow read, write;
				allow read:	if isSignedIn() && isOwner(userId) //TODO: isAdmin(userId) && isAuditor(userId)
				allow create:	if isSignedIn() && isOwner(userId) //TODO: isAdmin(userId) && isAuditor(userId)
				allow update:	if isSignedIn() && isOwner(userId) //TODO: isAdmin(userId) && isAuditor(userId)
				allow delete: if false

		}

		match /vehicles/{vehicleId} {
			// allow read, write;
				allow read:	if isSignedIn() && isAssetOwner()
				allow create:	if isSignedIn() && isOwner(incomingData().userId)  //TODO: isAdmin(userId) && isAuditor(userId)
										// && incomingData().size() == 7
										&& incomingData().license is string
										&& incomingData().colour is string
										&& incomingData().model is string
										// && incomingData().make is map
										&& incomingData().url is string
										&& incomingData().loadingCapacity is number
										// && incomingData().make.size() == 2
										// && incomingData().make.type is string
										// && incomingData().make.detail is string

				allow update:	if isSignedIn() && isAssetOwner() //TODO: isAdmin(userId) && isAuditor(userId)
										&& incomingData().userId == existingData().userId
										&& incomingData().isRemoved == existingData().isRemoved
										&& incomingData().createdAt == existingData().createdAt
										&& incomingData().updatedAt == existingData().updatedAt
										&& existingData().isRemoved == false
		
				allow delete: if false

		}


		match /plantations/{plantationId} {
			// allow read, write;
				allow read:	if isSignedIn() &&  ( isAssetOwner() || isProducerRep() )
				
				allow create:	if isSignedIn() && isOwner(incomingData().userId)  //TODO: isAdmin(userId) && isAuditor(userId)
											// && incomingData().size() == 3
											// && incomingData().unAudited.size() == 11
											// && incomingData().name is string
											// && incomingData().unAudited.management.type is string
											// && incomingData().unAudited.management.name is string
											// && incomingData().unAudited.management.otherDetails is string
											// && incomingData().unAudited.buyerAssociation.type is string
											// && incomingData().unAudited.buyerAssociation.plasma is string
											// && incomingData().unAudited.buyerAssociation.mill is string
											// && incomingData().unAudited.buyerAssociation.agreement is string
											// && incomingData().unAudited.certification is string
											// && incomingData().unAudited.area is number
											// && incomingData().unAudited.age is number // age min max check?
											// && incomingData().unAudited.treesPlanted is number
											// && incomingData().unAudited.treesProductive is number
											// && incomingData().unAudited.aveMonthlyYield is number
											// && incomingData().unAudited.proofOfRights is string
											// && incomingData().unAudited.landPreviousUse is string
											// && incomingData().unAudited.landClearingMethod is string

				allow update:	if isSignedIn() &&  ( isAssetOwner() || isProducerRep() ) //TODO: isAdmin(userId) && isAuditor(userId)
											&& incomingData().userId == existingData().userId
											&& incomingData().isRemoved == existingData().isRemoved
											&& incomingData().createdAt == existingData().createdAt
											&& incomingData().updatedAt == existingData().updatedAt
											&& incomingData().isActive == existingData().isActive
											&& incomingData().auditAcceptedAt == existingData().auditAcceptedAt
											&& incomingData().auditAt == existingData().auditAt
											&& incomingData().auditBy == existingData().auditBy
											&& existingData().isRemoved == false
								
				allow delete: if false

		}


		match /plantations/{plantationId}/buyers/{buyerId} {
				allow read:	if isSignedIn() &&  ( isAssetOwner() || isProducerRep() )	
				allow create:	if isSignedIn() && isOwner(userId) //TODO: isAdmin(userId) && isAuditor(userId)
				allow update:	if isSignedIn() && isOwner(userId) //TODO: isAdmin(userId) && isAuditor(userId)
				allow delete: if false
		}	


		match /assistance/{assistanceId} {
				allow read:	if isSignedIn() && isOwner(incomingData().userId) //TODO: isAdmin(userId) && isAuditor(userId)
				allow create:	if isSignedIn() && isOwner(incomingData().userId) //TODO: isAdmin(userId) && isAuditor(userId)
				allow update:	if isSignedIn() && isOwner(incomingData().userId) //TODO: isAdmin(userId) && isAuditor(userId)
				allow delete: if false
		}

		match /mills/{millsId} {
				allow read:	if true
				allow write: if false
		}
	
		// millAdminId needs to be the userId
		match /mills/{millsId}/millAdmins/{millAdminId} {
				allow read:	if isSignedIn() && (isMillAdmin(millsId)  || isSuperUser())  
				allow create: if isSignedIn() && isSuperUser()
											&& incomingData().size() == 4
											&& incomingData().name is string
											&& incomingData().phoneNumber is string
											&& incomingData().registrarId is string
											&& incomingData().registrarId == request.auth.uid
											&& incomingData().isAdmin == true
				allow delete: if isSignedIn() && (isMillAdmin(millsId)  || isSuperUser())  
				allow update: if false
		}

	// millRepId needs to be the userId
		match /mills/{millsId}/millReps/{millRepId} {
				allow read:	if isSignedIn() && (isMillAdmin(millsId)  || isSuperUser())  
				allow create: if isSignedIn() && (isMillAdmin(millsId)  || isSuperUser())
											&& incomingData().size() == 4
											&& incomingData().name is string
											&& incomingData().phoneNumber is string
											&& incomingData().registrarId is string
											&& incomingData().registrarId == request.auth.uid
											&& incomingData().isAdmin == false
				allow delete: if isSignedIn() && (isMillAdmin(millsId)  || isSuperUser())  
				allow update: if false
		}

		match /transactions/{transactionId}{
				allow read, write;
		}
	
		match /tradeboard/{userId}{
				allow read:	if isSignedIn() &&  isOwner(userId) // can access your own tradebaord only
				allow create:	if false
				allow create:	if false  
				allow update: if false
		}



 }
}